# -*- #################
# ---------------------------------------------------------------------------
# SGeMS_ArcGIS.py
# Created on: 2020-03-09 19:37:50.00000
#   (generated by ArcGIS/ModelBuilder)
# Usage: SGeMS_ArcGIS <Input_ASCII_raster_file>
# Description: Process ASCII file to be imported into ArcMap
# ---------------------------------------------------------------------------

# Import arcpy module
import arcpy, os, csv

# Script arguments
Input_ASCII_raster_file = arcpy.GetParameterAsText(0)
out_workspace = arcpy.GetParameterAsText(1)
n_cols = arcpy.GetParameterAsText(2)
n_rows = arcpy.GetParameterAsText(3)
xll_center = arcpy.GetParameterAsText(4)
yll_center = arcpy.GetParameterAsText(5)
cell_size = arcpy.GetParameterAsText(6)
nodata_value = arcpy.GetParameterAsText(7)
arcpy.env.outputCoordinateSystem = arcpy.GetParameter(8)
arcpy.env.overwriteOutput = True

# Local variables:
in_workspace = os.path.dirname(Input_ASCII_raster_file)
out_file = os.path.join(in_workspace, 'output.txt')
Output_raster = os.path.join(in_workspace, 'Output_raster')
Output_Raster_Dataset = os.path.join(out_workspace, 'Out_raster')
Output_point_features = os.path.join(out_workspace, 'Out_points')
Delete_succeeded = "false"
header = ['NCOLS ' + n_cols, 'NROWS ' + n_rows, 'XLLCENTER ' + xll_center,
          'YLLCENTER ' + yll_center,
          'CELLSIZE ' + cell_size, 'NODATA_VALUE ' + nodata_value]


# Process: ASCII to Raster
def parse_header(parameters, reader):
    # Parse first 3 lines of header as parameters to be added back later
    i = 0
    for param in parameters:
        parameters[i] = next(reader)
        i += 1
    return parameters


def parse_coordinates(coords):
    coord_string = str(coords)
    split = coord_string.split("(")
    split.remove()
    coordinates = split[1].split('x')
    return split


params = ['coords', 'columns', 'name']
parsed_coordinates = ''

# Open GSLIB file as csv object for formatting purposes
with open(Input_ASCII_raster_file, 'rb') as f:
    doc_reader = csv.reader(f, delimiter='\t')

    parse_header(params, doc_reader)

    # parse_coordinates(params[0])

    # Reverse the remaining entries
    doc_reversed = reversed(list(doc_reader))

    # Create output file to be loaded into ArcMap
    with open(out_file, 'wb') as new_file:
        doc_writer = csv.writer(new_file, delimiter=' ', quoting=csv.QUOTE_NONE, escapechar=' ')
        # Re-write header back to the top of reversed list
        for line in header:
            new_file.write(line + '\n')

        # Write remaining entries into newly created file
        for row in doc_reversed:
            doc_writer.writerow(row)

arcpy.ASCIIToRaster_conversion(out_file, Output_raster, "INTEGER")

# Process: Mirror
arcpy.Mirror_management(Output_raster, Output_Raster_Dataset)

# Process: Raster to Point
arcpy.RasterToPoint_conversion(Output_Raster_Dataset, Output_point_features, "")

# Process: Delete
arcpy.Delete_management(Output_raster, "")











